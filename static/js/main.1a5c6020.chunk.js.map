{"version":3,"sources":["Cards.js","CardList.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Cards","id","name","email","className","alt","src","CardList","robs","map","item","i","key","SearchBox","SearchChange","type","placeholder","onChange","App","onSearchChange","eve","setState","searchfield","target","value","state","robots","fetch","then","response","json","users","this","edit","filter","robo","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAiBeA,EAfD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC1B,OACG,yBAAKC,UAAW,4DACZ,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAA1B,mBACtB,yBAAKG,UAAY,MAEhB,4BAAKF,GACL,4BAAKC,MCkBCI,EAvBE,SAAC,GAAU,IAATC,EAAQ,EAARA,KAClB,OACC,6BAEEA,EAAKC,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,EAAD,CACAC,IAAOD,EACPV,GAAOO,EAAKG,GAAGV,GACfC,KAASM,EAAKG,GAAGT,KACjBC,MAAUK,EAAKG,GAAGR,aCCVU,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACpB,OACE,yBAAKV,UAAU,OACd,2BACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCsCEI,E,kDAzCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAIG,OAAOC,SAbvC,EAAKC,MAAM,CACVC,OAAQ,GACRJ,YAAa,IAJD,E,gEAQQ,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKV,SAAS,CAAEK,OAAQK,S,+BAOnC,IAAD,EACuBC,KAAKP,MAA5BH,EADA,EACAA,YAAaI,EADb,EACaA,OACbO,EAAOP,EAAOQ,QAAO,SAAAC,GAC1B,OAAOA,EAAKjC,KAAKkC,cAAcC,SAASf,EAAYc,kBAGrD,OAAQV,EAAOY,OAGV,yBAAKlC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACF,kBAAC,EAAD,CAAWU,aAAckB,KAAKb,iBAE1B,kBAAC,EAAD,CAAUX,KAAMyB,KANvB,wBAAI7B,UAAU,YAAd,e,GA1BYmC,a,MCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1a5c6020.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cards = ({ id, name, email }) =>{\r\n\treturn (\r\n\t\t\t\t<div className= 'tc grow white bg-near-black br3 pa3 ma2 dib bw2 shadow-3'>\r\n\t\t\t\t    <img alt='rob pic' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t\t    <div className = 'tc'>\r\n\r\n\t\t\t\t    \t<h2>{name}</h2>\r\n\t\t\t\t    \t<h3>{email}</h3>\r\n\t\t\t\t    \t\r\n\t\t\t\t    </div>\r\n\t\t\t\t</div>\r\n\t\t);\r\n\t\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport Cards from './Cards';\r\n\r\n\r\nconst CardList = ({robs})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobs.map((item, i) => { \r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<Cards\r\n\t\t\t\t\t\t\tkey = {i}\r\n\t\t\t\t\t\t\tid = { robs[i].id }\r\n\t\t\t\t\t\t\tname = { robs[i].name }\r\n\t\t\t\t\t\t\temail = { robs[i].email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t})\r\n\r\n\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({SearchChange}) => {\r\nreturn( \r\n\t\t<div className='pa2' > \r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--black br2 bg-moon-gray' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search Robots' \r\n\t\t\tonChange={SearchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\t\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox.js'\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state={\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n\tonSearchChange = (eve) =>{\n\t\tthis.setState({searchfield: eve.target.value});\n\t}\n\n\trender() {\n\t\tconst { searchfield, robots} = this.state;\n  \t\tconst edit = robots.filter(robo => {\n  \t\t\treturn robo.name.toLowerCase().includes(searchfield.toLowerCase());\n  \t\t})\n\n  \t\treturn !robots.length ?\n      <h1 className='tc white'>Loading</h1> :(\n  \t\t\t\n  \t\t   \t\t<div className='tc'>\n  \t\t  \t\t   <h1 className='f1'>RoboFriends</h1>\n  \t\t\t\t   <SearchBox SearchChange={this.onSearchChange} /> \n  \t\t\t\t  \n  \t\t\t\t   \t  \t<CardList robs={edit} />\n  \t\t\t\t   \n   \t\t\t\t\t\n   \t\t\t\t   \n   \t\t    </div>\n   \t\t   \t\t\n   \t\t);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}